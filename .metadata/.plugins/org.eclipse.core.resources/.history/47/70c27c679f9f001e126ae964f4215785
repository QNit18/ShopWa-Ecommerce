package com.shopme.admin.user;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.annotation.Rollback;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@Rollback(value = false)
public class UserRepositoryTests {

    @Autowired
    private UserRepository repo;

    @Autowired
    private TestEntityManager entityManager;

    @Test
    public void testCreateNewUserWithOneRole(){
        Role roleAdmin =  entityManager.find(Role.class, 1);
        User userQuangNV = new User("vanquang1833@gmail.com", "031803",
                "Quang", "Nguyen");
        userQuangNV.addRole(roleAdmin);

        User savedUser = repo.save(userQuangNV);
        assertThat(savedUser.getId()).isGreaterThan(0);
    }

    @Test
    public void testCreateNewUserWithTwoRole(){
        User userRiven = new User("riven@gmail.com", "riven1803",
                "Ri", "Ven");

        Role roleEditor = new Role(3);
        Role roleAssitant = new Role(5);

        userRiven.addRole(roleEditor);
        userRiven.addRole(roleAssitant);

        User savedUser = repo.save(userRiven);

        assertThat(savedUser.getId()).isGreaterThan(0);
    }

    @Test
    public void testListAllUsers() {
        Iterable<User> listUsers = repo.findAll();// Iterable là một interface trong Java được sử dụng để biểu diễn một tập hợp các phần tử có thể duyệt qua được
        listUsers.forEach(user -> System.out.println(user));
    }

    @Test
    public void testGetUserId(){
        User userQuang = repo.findById(1).get();
        System.out.println(userQuang);
        assertThat(userQuang).isNotNull();
    }

    @Test
    public void testUpdateUserDetails() {
        User userQuang = repo.findById(1).get();
        userQuang.setEnabled(true);
        userQuang.setEmail("vanquangjv18@gmail.com");

        repo.save(userQuang);
    }

    @Test
    public void testUpdateUserRoles() {
        User userRiven = repo.findById(2).get();

        Role roleEditor = new Role(3);
        Role roleSalesPerson = new Role(2);


        userRiven.getRoles().remove(roleEditor);
        userRiven.addRole(roleSalesPerson);

        repo.save(userRiven);
    }

    @Test
    public void testDeleteUser() {
        Integer userId = 2;
        repo.deleteById(userId);
    }

    @Test
    public void testGetUserByEmail(){
        String email = "vanquangjv18@gmail.com";
        User user = repo.getUserByEmail(email);

        assertThat(user).isNotNull();
    }
    
    @Test
    public void testCountById() {
    	Integer id = 1;
    	Long countById = repo.countById(id);
    	
    	assertThat(countById).isNotNull().isGreaterThan(0);
    }
    
    @Test
    public void testDisableUser() {
    	Integer id = 1;
    	repo.updateEnabledStatus(id, false);
    }

    @Test
    public void testEnableUser() {
    	Integer id = 5;
    	repo.updateEnabledStatus(id, true);
    }
    
    @Test
    public void testListFirstPage() {
    	int pageNumber = 0;
    	int pageSize = 4;
    	Pageable pageable = PageRequest.of(pageNumber, pageSize);
    	Page<User> page = repo.findAll(pageable);
    }

}
